{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "traningDFswati"
		},
		"BlobMetaDataSQLConnection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BlobMetaDataSQLConnection'"
		},
		"Datawarehouse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Datawarehouse'"
		},
		"OrdersBlobStorageConnection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OrdersBlobStorageConnection'"
		},
		"OrganizedDLSConnection_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'OrganizedDLSConnection'"
		},
		"DLSTargetProviderFunctionConnection_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://dlstargetprovider20201125160234.azurewebsites.net"
		},
		"OrganizedDLSConnection_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://trainingdlsswati.dfs.core.windows.net"
		},
		"trainingkeyvaultconnection_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://trainingkeyvaultv2swati.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OrderBlobProcessor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this pipeline will process incoming internet blob files",
				"activities": [
					{
						"name": "LoadProcessableBlob",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[uspGetProcessableBlobs]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "BlobMetadataDatadest",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterateProcessableBlobs",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LoadProcessableBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LoadProcessableBlob').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "DLSTargetInformation",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "DLSTargetProvider",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"Accpect": "application/json"
										},
										"body": {
											"value": "@concat('{\"blobPath\":\"', item().Path, '\", \"blobName\":\"', item().BlobName, '\"}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "DLSTargetProviderFunctionConnection",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy Blob Data to DLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DLSTargetInformation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "orderid",
														"type": "Int32",
														"physicalType": "String"
													},
													"sink": {
														"name": "orderid",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "orderdate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "orderdate",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "customer",
														"type": "Int32",
														"physicalType": "String"
													},
													"sink": {
														"name": "customer",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "product",
														"type": "Int32",
														"physicalType": "String"
													},
													"sink": {
														"name": "product",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "units",
														"type": "Int32",
														"physicalType": "String"
													},
													"sink": {
														"name": "units",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "billingaddress",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "billingaddress",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "remarks",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "remarks",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OrdersBlobStorageDataset",
											"type": "DatasetReference",
											"parameters": {
												"containerName": {
													"value": "@activity('DLSTargetInformation').output.containerName",
													"type": "Expression"
												},
												"folder": {
													"value": "@activity('DLSTargetInformation').output.path",
													"type": "Expression"
												},
												"fileName": {
													"value": "@activity('DLSTargetInformation').output.blobName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "OrganizedOrdersDLSDataset",
											"type": "DatasetReference",
											"parameters": {
												"fileSystemName": "organized-data",
												"folder": {
													"value": "@activity('DLSTargetInformation').output.targetOrganizedFullPath",
													"type": "Expression"
												},
												"fileName": {
													"value": "@activity('DLSTargetInformation').output.targetOrganizedFileName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UpdateBlobMetaData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Blob Data to DLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[uspUpdateBlobMetadata]",
										"storedProcedureParameters": {
											"dlsLocation": {
												"value": {
													"value": "@concat(activity('DLSTargetInformation').output.targetOrganizedFullPath, '/', activity('DLSTargetInformation').output.targetOrganizedFileName)",
													"type": "Expression"
												},
												"type": "String"
											},
											"recordId": {
												"value": {
													"value": "@item().RecordId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BlobMetaDataSQLConnection",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ProcessOrdersDataflow",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "DLSTargetInformation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "ProcessOrdersDataflow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"OrderInputSource": {
													"containerName": {
														"value": "@activity('DLSTargetInformation').output.containerName",
														"type": "Expression"
													},
													"folder": {
														"value": "@activity('DLSTargetInformation').output.path",
														"type": "Expression"
													},
													"fileName": {
														"value": "@activity('DLSTargetInformation').output.blobName",
														"type": "Expression"
													}
												},
												"CustomersDataSource": {},
												"ProductsDataSource": {},
												"CapitalcitiesDataSource": {},
												"outputtoDW": {}
											}
										},
										"staging": {
											"linkedService": {
												"referenceName": "OrdersBlobStorageConnection",
												"type": "LinkedServiceReference"
											},
											"folderPath": "staging-data"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobMetadataDatadest')]",
				"[concat(variables('factoryId'), '/linkedServices/DLSTargetProviderFunctionConnection')]",
				"[concat(variables('factoryId'), '/datasets/OrdersBlobStorageDataset')]",
				"[concat(variables('factoryId'), '/datasets/OrganizedOrdersDLSDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/BlobMetaDataSQLConnection')]",
				"[concat(variables('factoryId'), '/dataflows/ProcessOrdersDataflow')]",
				"[concat(variables('factoryId'), '/linkedServices/OrdersBlobStorageConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobMetadataDatadest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobMetaDataSQLConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "RecordId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RecordDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BlobId",
						"type": "nvarchar"
					},
					{
						"name": "BlobName",
						"type": "nvarchar"
					},
					{
						"name": "DisplayName",
						"type": "nvarchar"
					},
					{
						"name": "Path",
						"type": "nvarchar"
					},
					{
						"name": "LastModified",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Size",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MediaType",
						"type": "nvarchar"
					},
					{
						"name": "IsFolder",
						"type": "bit"
					},
					{
						"name": "ETag",
						"type": "nvarchar"
					},
					{
						"name": "FileLocator",
						"type": "nvarchar"
					},
					{
						"name": "ProcessStatus",
						"type": "nvarchar"
					},
					{
						"name": "DLSTargetLocation",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BlobMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobMetaDataSQLConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CapitalCitiesDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobMetaDataSQLConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CityId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CityName",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CapitalCities"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobMetaDataSQLConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDLSDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrganizedDLSConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customers.csv",
						"folderPath": "master-data",
						"fileSystem": "organized-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customerid",
						"type": "String"
					},
					{
						"name": "fullname",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "credit",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OrganizedDLSConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersBlobStorageDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrdersBlobStorageConnection",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "orders"
					},
					"folder": {
						"type": "string",
						"defaultValue": "/"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "orders-3.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "orderid",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					},
					{
						"name": "customer",
						"type": "String"
					},
					{
						"name": "product",
						"type": "String"
					},
					{
						"name": "units",
						"type": "String"
					},
					{
						"name": "billingaddress",
						"type": "String"
					},
					{
						"name": "remarks",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OrdersBlobStorageConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrganizedOrdersDLSDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrganizedDLSConnection",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileSystemName": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().fileSystemName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "orderid",
						"type": "INT32"
					},
					{
						"name": "orderdate",
						"type": "UTF8"
					},
					{
						"name": "customer",
						"type": "INT32"
					},
					{
						"name": "product",
						"type": "INT32"
					},
					{
						"name": "units",
						"type": "INT32"
					},
					{
						"name": "billingaddress",
						"type": "UTF8"
					},
					{
						"name": "remarks",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OrganizedDLSConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsDLSDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrganizedDLSConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.json",
						"folderPath": "master-data",
						"fileSystem": "organized-data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"productid": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						},
						"unitsinstock": {
							"type": "integer"
						},
						"unitprice": {
							"type": "integer"
						},
						"itemdiscount": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OrganizedDLSConnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputDW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Datawarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "OrderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "varchar"
					},
					{
						"name": "CustomerFullName",
						"type": "nvarchar"
					},
					{
						"name": "CustomerType",
						"type": "varchar"
					},
					{
						"name": "CustomerLocation",
						"type": "nvarchar"
					},
					{
						"name": "ProductTitle",
						"type": "nvarchar"
					},
					{
						"name": "Units",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Amount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Region",
						"type": "varchar"
					},
					{
						"name": "BillingAddress",
						"type": "nvarchar"
					},
					{
						"name": "ActiveStatus",
						"type": "varchar"
					},
					{
						"name": "UnitsInStock",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Credit",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ProcessedOrders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datawarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobMetaDataSQLConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('BlobMetaDataSQLConnection_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "trainingkeyvaultconnection",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlpassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/trainingkeyvaultconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLSTargetProviderFunctionConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('DLSTargetProviderFunctionConnection_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "trainingkeyvaultconnection",
							"type": "LinkedServiceReference"
						},
						"secretName": "functionkey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/trainingkeyvaultconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datawarehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('Datawarehouse_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "trainingkeyvaultconnection",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlpassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/trainingkeyvaultconnection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersBlobStorageConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OrdersBlobStorageConnection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrganizedDLSConnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('OrganizedDLSConnection_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('OrganizedDLSConnection_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trainingkeyvaultconnection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('trainingkeyvaultconnection_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOrdersDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this dataflow processes internet files from blob to wareshouse",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdersBlobStorageDataset",
								"type": "DatasetReference"
							},
							"name": "OrderInputSource"
						},
						{
							"dataset": {
								"referenceName": "CustomerDLSDataset",
								"type": "DatasetReference"
							},
							"name": "CustomersDataSource"
						},
						{
							"dataset": {
								"referenceName": "ProductsDLSDataset",
								"type": "DatasetReference"
							},
							"name": "ProductsDataSource"
						},
						{
							"dataset": {
								"referenceName": "CapitalCitiesDataset",
								"type": "DatasetReference"
							},
							"name": "CapitalcitiesDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputDW",
								"type": "DatasetReference"
							},
							"name": "outputtoDW"
						}
					],
					"transformations": [
						{
							"name": "OrderandCustomer"
						},
						{
							"name": "OrderCustomerandProduct"
						},
						{
							"name": "OrderJoinedOutput"
						},
						{
							"name": "SelectedColumn"
						},
						{
							"name": "PreparedColumns"
						},
						{
							"name": "CleansedCloumns"
						},
						{
							"name": "ProcessedOrders"
						}
					],
					"script": "source(output(\n\t\torderid as string,\n\t\torderdate as string,\n\t\tcustomer as integer,\n\t\tproduct as integer,\n\t\tunits as integer,\n\t\tbillingaddress as string,\n\t\tremarks as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> OrderInputSource\nsource(output(\n\t\tcustomerid as integer,\n\t\tfullname as string,\n\t\taddress as string,\n\t\tcredit as integer,\n\t\tstatus as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CustomersDataSource\nsource(output(\n\t\titemdiscount as short,\n\t\tproductid as short,\n\t\ttitle as string,\n\t\tunitprice as short,\n\t\tunitsinstock as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments') ~> ProductsDataSource\nsource(output(\n\t\tCityId as integer,\n\t\tCityName as string,\n\t\tRegion as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CapitalcitiesDataSource\nOrderInputSource, CustomersDataSource join(customer == customerid,\n\tjoinType:'inner',\n\tbroadcast: 'right')~> OrderandCustomer\nOrderandCustomer, ProductsDataSource join(product == productid,\n\tjoinType:'inner',\n\tbroadcast: 'right')~> OrderCustomerandProduct\nOrderCustomerandProduct, CapitalcitiesDataSource join(address == CityName,\n\tjoinType:'inner',\n\tbroadcast: 'right')~> OrderJoinedOutput\nOrderJoinedOutput select(mapColumn(\n\t\torderid,\n\t\torderdate,\n\t\tunits,\n\t\tbillingaddress,\n\t\tfullname,\n\t\tcustomerlocation = address,\n\t\tcredit,\n\t\tstatus,\n\t\titemdiscount,\n\t\ttitle,\n\t\tunitprice,\n\t\tunitsinstock,\n\t\tRegion\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumn\nSelectedColumn derive(orderamount = units * unitprice,\n\t\tdiscountamount = toInteger(units * unitprice * itemdiscount * 0.01),\n\t\tcustomertype = iif(credit < 1000, \"Silver\", iif(credit >= 10000 && credit < 1000, \"Gold\", \"Platinum\")),\n\t\tactivestatus = iif(status, \"Active\", \"Inactive\")) ~> PreparedColumns\nPreparedColumns select(mapColumn(\n\t\torderid,\n\t\torderdate,\n\t\tunits,\n\t\tbillingaddress,\n\t\tfullname,\n\t\tcustomerlocation,\n\t\tcredit,\n\t\ttitle,\n\t\tunitprice,\n\t\tunitsinstock,\n\t\tRegion,\n\t\torderamount,\n\t\tdiscountamount,\n\t\tcustomertype,\n\t\tactivestatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CleansedCloumns\nCleansedCloumns filter(credit >= orderamount && unitsinstock >= units) ~> ProcessedOrders\nProcessedOrders sink(input(\n\t\tOrderId as integer,\n\t\tOrderDate as string,\n\t\tCustomerFullName as string,\n\t\tCustomerType as string,\n\t\tCustomerLocation as string,\n\t\tProductTitle as string,\n\t\tUnits as integer,\n\t\tUnitPrice as integer,\n\t\tAmount as integer,\n\t\tDiscount as integer,\n\t\tRegion as string,\n\t\tBillingAddress as string,\n\t\tActiveStatus as string,\n\t\tUnitsInStock as integer,\n\t\tCredit as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tOrderDate = orderdate,\n\t\tCustomerType = customertype,\n\t\tCustomerLocation = customerlocation,\n\t\tUnits = units,\n\t\tUnitPrice = unitprice,\n\t\tRegion,\n\t\tBillingAddress = billingaddress,\n\t\tActiveStatus = activestatus,\n\t\tUnitsInStock = unitsinstock,\n\t\tCredit = credit,\n\t\tOrderId = orderid,\n\t\tCustomerFullName = fullname,\n\t\tProductTitle = title,\n\t\tAmount = orderamount,\n\t\tDiscount = discountamount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> outputtoDW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdersBlobStorageDataset')]",
				"[concat(variables('factoryId'), '/datasets/CustomerDLSDataset')]",
				"[concat(variables('factoryId'), '/datasets/ProductsDLSDataset')]",
				"[concat(variables('factoryId'), '/datasets/CapitalCitiesDataset')]",
				"[concat(variables('factoryId'), '/datasets/outputDW')]"
			]
		}
	]
}